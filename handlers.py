import asyncio, re, logging, time
from pathlib import Path
from datetime import datetime
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import ContextTypes
from config import *
from keyboards import *
from downloader import BACKENDS, DownloadRequest

# –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s ‚ú® [%(levelname)s] %(message)s",
)
logger = logging.getLogger("bot")

URL_RE = re.compile(URL_REGEX, re.IGNORECASE)
active_tasks = {}
global_semaphore = asyncio.Semaphore(GLOBAL_CONCURRENCY)

class State:
	def __init__(self):
		self.platform = None
		self.mode = None
		self.quality = None
		self.menu_msg_id = None
		self.awaiting_review = False

def get_state(context: ContextTypes.DEFAULT_TYPE) -> State:
	st = context.user_data.get("state")
	if not st:
		st = State()
		context.user_data["state"] = st
	return st

async def _edit_or_send(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, kb=None, include_reply=True):
	"""–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ–¥–Ω–æ –º–µ–Ω—é-—Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º. –î–æ–±–∞–≤–ª—è–µ–º reply_kb –¥–ª—è "–ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è"."""
	st = get_state(context)
	chat = update.effective_chat
	reply_kb_v = reply_kb() if include_reply else None
	if st.menu_msg_id:
		try:
			await context.bot.edit_message_text(
				text=text, chat_id=chat.id, message_id=st.menu_msg_id, reply_markup=kb
			)
			if include_reply and update.message:
				await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=reply_kb_v)
			return
		except Exception:
			st.menu_msg_id = None
	msg = await context.bot.send_message(chat_id=chat.id, text=text, reply_markup=kb)
	st.menu_msg_id = msg.message_id
	if include_reply and update.message:
		await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=reply_kb_v)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
	st = get_state(context)
	st.platform = st.mode = st.quality = None
	st.menu_msg_id = None
	logger.info("üöÄ /start user=%s", update.effective_user.id if update.effective_user else "?")
	logo_path = Path("logo.png")
	greet = (
		"–ü—Ä–∏–≤–µ—Ç! üëãüòÑ\n"
		"–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ üé¨ –∏ –∞—É–¥–∏–æ üéµ –∏–∑ TikTok –∏ YouTube –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ.\n"
		"–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É!"
	)
	if logo_path.exists():
		try:
			await update.message.reply_photo(photo=logo_path.open('rb'), caption=greet, reply_markup=reply_kb())
		except Exception:
			await update.message.reply_text(greet, reply_markup=reply_kb())
	else:
		await update.message.reply_text(greet, reply_markup=reply_kb())
	await _edit_or_send(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ‚¨áÔ∏è", platform_kb())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
	logger.info("‚ùì /help user=%s", update.effective_user.id if update.effective_user else "?")
	await _edit_or_send(update, context,
		"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—ã–±–µ—Ä–∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º—É ‚Üí –†–µ–∂–∏–º ‚Üí –ö–∞—á–µ—Å—Ç–≤–æ (–¥–ª—è –≤–∏–¥–µ–æ) ‚Üí –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É. –ú–µ–Ω—é –Ω–∏–∂–µ.",
		menu_kb()
	)

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
	logger.info("üîÑ /reset user=%s", update.effective_user.id if update.effective_user else "?")
	context.user_data["state"] = State()
	await _edit_or_send(update, context, "‚úÖ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", platform_kb())

async def menu_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
	logger.info("üìã /menu user=%s", update.effective_user.id if update.effective_user else "?")
	await _edit_or_send(update, context, "‚ú® –ú–µ–Ω—é:", menu_kb())

async def on_platform(update: Update, context: ContextTypes.DEFAULT_TYPE, platform: str):
	st = get_state(context)
	st.platform = platform
	st.mode = None
	st.quality = None
	logger.info("üéØ platform=%s user=%s", platform, update.effective_user.id if update.effective_user else "?")
	await _edit_or_send(update, context, f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.upper()} ‚úÖ\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", mode_kb())

async def on_mode(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str):
	st = get_state(context)
	st.mode = mode
	st.quality = None
	logger.info("üéõ mode=%s user=%s", mode, update.effective_user.id if update.effective_user else "?")
	if mode == MODE_AUDIO:
		await _edit_or_send(update, context, f"–†–µ–∂–∏–º: üéµ MP3 ‚úÖ\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É!", menu_kb())
	else:
		await _edit_or_send(update, context, f"–†–µ–∂–∏–º: üé¨ –í–∏–¥–µ–æ ‚úÖ\n–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:", quality_kb())

async def on_quality(update: Update, context: ContextTypes.DEFAULT_TYPE, quality: str):
	st = get_state(context)
	st.quality = quality
	quality_label = "–û—Ä–∏–≥–∏–Ω–∞–ª" if quality == QUALITY_BEST else quality
	logger.info("üéö quality=%s user=%s", quality_label, update.effective_user.id if update.effective_user else "?")
	await _edit_or_send(update, context,
		f"–ö–∞—á–µ—Å—Ç–≤–æ: {quality_label} ‚úÖ\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É.", menu_kb()
	)

async def on_menu_action(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
	logger.info("üìã menu=%s user=%s", action, update.effective_user.id if update.effective_user else "?")
	if action == "platform":
		await _edit_or_send(update, context, "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", platform_kb()); return
	if action == "mode":
		await _edit_or_send(update, context, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", mode_kb()); return
	if action == "quality":
		await _edit_or_send(update, context, "–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:", quality_kb()); return
	if action == "help":
		await _edit_or_send(update, context, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É TikTok/YouTube. –í –ú–µ–Ω—é –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ.", menu_kb()); return
	if action == "reset":
		await reset_cmd(update, context); return

async def on_more_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, choice: str):
	if choice == "yes":
		await update.callback_query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É ‚ú®", reply_markup=menu_kb())
		if update.callback_query.message:
			await update.callback_query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=reply_kb())
	else:
		await update.callback_query.edit_message_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º! üíô", reply_markup=menu_kb())
		if update.callback_query.message:
			await update.callback_query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=reply_kb())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
	text = (update.message.text or "").strip()
	if not text:
		return
	st = get_state(context)

	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞
	if st.awaiting_review:
		try:
			reviews_path = Path(REVIEWS_FILE)
			if reviews_path.exists():
				content = reviews_path.read_text(encoding="utf-8")
			else:
				content = ""
			user_id = update.effective_user.id if update.effective_user else "?"
			content += f"\n[{datetime.now().isoformat()}] user={user_id}: {text}\n"
			reviews_path.write_text(content, encoding="utf-8")
		except Exception as e:
			logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: %s", e)
		st.awaiting_review = False
		context.user_data["state"] = st
		await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíô", reply_markup=reply_kb())
		await update.message.reply_text("–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ?", reply_markup=more_kb())
		return

	if URL_RE.search(text):
		if not st.platform:
			await _edit_or_send(update, context, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", platform_kb()); return
		if not st.mode:
			await _edit_or_send(update, context, "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", mode_kb()); return
		if st.mode != MODE_AUDIO and not st.quality:
			await _edit_or_send(update, context, "–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:", quality_kb()); return
		await _download(update, context, text)
		return

	low = text.lower()
	if "help" in low or "–ø–æ–º–æ" in low:
		await help_cmd(update, context); return
	if "menu" in low or "–º–µ–Ω—é" in low:
		await menu_cmd(update, context); return
	if "reset" in low or "—Å–±—Ä–æ—Å" in low:
		await reset_cmd(update, context); return

	await _edit_or_send(update, context, "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é:", menu_kb())

async def _download(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
	user_id = update.effective_user.id if update.effective_user else 0
	if user_id in active_tasks:
		await _edit_or_send(update, context, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞. /cancel —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.", menu_kb())
		return
	async with global_semaphore:
		task = asyncio.current_task()
		if task:
			active_tasks[user_id] = task
		st = get_state(context)
		anim_msg = None
		status_msg = None
		start_ts = time.monotonic()
		try:
			# –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
			work_gif = WORKING_GIFS[int(time.time()) % len(WORKING_GIFS)]
			try:
				anim_msg = await update.message.reply_animation(animation=work_gif, caption="–°–∫–∞—á–∏–≤–∞—é‚Ä¶ ‚è≥")
			except Exception:
				pass
			await context.bot.send_chat_action(update.effective_chat.id, ChatAction.UPLOAD_VIDEO)
			status_msg = await update.message.reply_text("–ì–æ—Ç–æ–≤–ª—é –∑–∞–≥—Ä—É–∑–∫—É‚Ä¶", reply_markup=menu_kb())
			await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=reply_kb())

			req = DownloadRequest(url=url, platform=st.platform, mode=st.mode, quality=st.quality or QUALITY_BEST)
			logger.info("‚¨áÔ∏è download start url=%s platform=%s quality=%s mode=%s user=%s", url, st.platform, st.quality, st.mode, user_id)

			last_err = None
			for backend in BACKENDS:
				try:
					est = backend.probe(req)
					if st.mode == MODE_VIDEO and est and est > MAX_BOT_FILE_SIZE:
						await _edit_or_send(update, context,
							f"‚ö†Ô∏è –§–∞–π–ª –±—É–¥–µ—Ç ~{est/1024/1024:.1f}MB (>–ª–∏–º–∏—Ç–∞). –°–Ω–∏–∑—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ MP3.",
							too_big_kb()
						)
						return
					res = backend.download(req)
					if st.mode == MODE_VIDEO and res.file_path.stat().st_size > MAX_BOT_FILE_SIZE:
						res.file_path.unlink(missing_ok=True)
						await _edit_or_send(update, context,
							"‚ö†Ô∏è –§–∞–π–ª –≤—ã—à–µ–ª –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ TG. –°–Ω–∏–∑—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ MP3.", too_big_kb())
						return

					dl_time = time.monotonic() - start_ts
					logger.info("‚úÖ downloaded file=%s size=%sB in %.2fs", res.filename, res.file_path.stat().st_size, dl_time)

					await status_msg.edit_text("–ó–∞–≥—Ä—É–∂–∞—é –≤ Telegram‚Ä¶ üì§")
					upload_start = time.monotonic()

					# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
					if st.mode == MODE_AUDIO:
						await update.message.reply_audio(audio=res.file_path.open('rb'), filename=res.filename, caption="–ì–æ—Ç–æ–≤–æ! üéµ")
					else:
						if res.filename.lower().endswith((".mp4",".mov",".m4v",".webm",".mkv")):
							await update.message.reply_video(video=res.file_path.open('rb'), supports_streaming=True, caption="–ì–æ—Ç–æ–≤–æ! üé¨")
						else:
							await update.message.reply_document(document=res.file_path.open('rb'), filename=res.filename, caption="–ì–æ—Ç–æ–≤–æ! üì¶")

					upload_time = time.monotonic() - upload_start
					total_time = time.monotonic() - start_ts
					logger.info("üì§ uploaded in %.2fs (total %.2fs)", upload_time, total_time)

					# GIF —É—Å–ø–µ—Ö–∞
					try:
						succ_gif = SUCCESS_GIFS[int(time.time()) % len(SUCCESS_GIFS)]
						await update.message.reply_animation(animation=succ_gif, caption="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º! üíô")
					except Exception as e:
						logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF: %s", e)

					# –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞
					await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ üìù ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç 5 —Å–µ–∫—É–Ω–¥!", reply_markup=reply_kb())
					st.awaiting_review = True
					context.user_data["state"] = st

					# –í–æ–ø—Ä–æ—Å "—Å–∫–∞—á–∞—Ç—å –µ—â–µ"
					await update.message.reply_text("–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ?", reply_markup=more_kb())
					await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ ‚¨áÔ∏è", reply_markup=reply_kb())
					return
				except Exception as e:
					last_err = e
					logger.warning("‚ö†Ô∏è backend %s failed: %s", backend.name, str(e))
					continue

			await _edit_or_send(update, context, f"‚ùå –û—à–∏–±–∫–∞: {last_err}", menu_kb())
		finally:
			active_tasks.pop(user_id, None)
			try:
				if anim_msg:
					await anim_msg.delete()
				if status_msg:
					await status_msg.delete()
			except Exception:
				pass

async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
	user_id = update.effective_user.id if update.effective_user else 0
	t = active_tasks.get(user_id)
	if t and not t.done():
		t.cancel()
		logger.info("‚õî cancel user=%s", user_id)
		await update.message.reply_text("‚õîÔ∏è –û—Ç–º–µ–Ω–∏–ª.", reply_markup=reply_kb())
	else:
		await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.", reply_markup=reply_kb())
