import asyncio, re, logging
from pathlib import Path
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatAction
from config import *
from keyboards import mode_kb, quality_kb_from, review_optin_kb
from downloader import BACKENDS, DownloadRequest, list_available_qualities
from db import save_download, save_review

logger = logging.getLogger("bot")
URL_RE = re.compile(URL_REGEX, re.IGNORECASE)
active_tasks = {}
global_semaphore = asyncio.Semaphore(GLOBAL_CONCURRENCY)

class State:
    def __init__(self):
        self.platform = None
        self.mode = None
        self.quality = None
        self.pending_url = None
        self.available_qualities = []
        self.awaiting_review = False
        self.last_action = None

def get_state(context: ContextTypes.DEFAULT_TYPE) -> State:
    st = context.user_data.get("state")
    if not st:
        st = State()
        context.user_data["state"] = st
    return st

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ —Å YouTube –∏ TikTok.\n\n"
        "–ß—Ç–æ —É–º–µ—é:\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å YouTube/TikTok\n\n"
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞."
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ ‚Äî —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å üì• (YouTube/TikTok)")

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–°–±—Ä–æ—Å–∏–ª! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É üöÄ")

async def on_review_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, val: str):
    st = get_state(context)
    if val == "yes":
        st.awaiting_review = True
        await update.callback_query.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ (3‚Äì200 —Å–∏–º–≤–æ–ª–æ–≤) üíô")
    else:
        st.awaiting_review = False
        await update.callback_query.message.reply_text("–û–∫–µ–π, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üôÇ")
    context.user_data["state"] = st

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    st = get_state(context)

    if st.awaiting_review:
        if 3 <= len(text) <= 200 and not text.startswith("/"):
            user_id = update.effective_user.id if update.effective_user else "?"
            action = st.last_action or "unknown"
            save_review({"userId": user_id, "action": action, "text": text})
            p = Path("reviews.txt"); prev = p.read_text(encoding="utf-8") if p.exists() else ""
            prev += f"\n[{datetime.now().isoformat()}] user={user_id} action={action}: {text}"
            p.write_text(prev, encoding="utf-8")
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíõ")
        st.awaiting_review = False
        context.user_data["state"] = st
        return

    if URL_RE.search(text):
        if "youtu" in text:
            st.platform = PLATFORM_YOUTUBE
        elif "tiktok" in text:
            st.platform = PLATFORM_TIKTOK
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ç–æ–ª—å–∫–æ YouTube –∏ TikTok üôè")
            return
        st.pending_url = text
        context.user_data["state"] = st
        await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å? üéß –ê—É–¥–∏–æ –∏–ª–∏ üìπ –í–∏–¥–µ–æ?", reply_markup=mode_kb())
        return

    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É üòå")

async def on_mode(update: Update, context: ContextTypes.DEFAULT_TYPE, mode: str):
    st = get_state(context)
    st.mode = mode
    url = st.pending_url
    chat_id = update.effective_chat.id
    if not url:
        await context.bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É üôÇ")
        return

    if mode == MODE_AUDIO:
        await context.bot.send_message(chat_id, "üéß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3 (320 kbps)‚Ä¶")
        st.last_action = f"{st.platform}:{mode}:request"
        context.user_data["state"] = st
        await _download(update, context, url)
        return

    try:
        quals = list_available_qualities(url, st.platform) or QUALITY_LIST_DEFAULT
        st.available_qualities = quals
        st.last_action = f"{st.platform}:{mode}:qualities_listed"
        context.user_data["state"] = st
        await update.callback_query.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏):", reply_markup=quality_kb_from(quals))
    except Exception as e:
        logger.warning("list qualities failed: %s", e)
        await update.callback_query.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö.",
                                                       reply_markup=quality_kb_from(QUALITY_LIST_DEFAULT))

async def on_quality(update: Update, context: ContextTypes.DEFAULT_TYPE, q: str):
    st = get_state(context)
    st.quality = q
    st.last_action = f"{st.platform}:{st.mode}:quality={q}"
    context.user_data["state"] = st
    await _download(update, context, st.pending_url)

async def _download(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    user_id = update.effective_user.id if update.effective_user else 0
    chat_id = update.effective_chat.id
    if user_id in active_tasks:
        await context.bot.send_message(chat_id, "‚è≥ –£–∂–µ –∫–∞—á–∞—é! /reset —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å")
        return

    async with global_semaphore:
        task = asyncio.current_task(); active_tasks[user_id] = task
        st = get_state(context)
        try:
            await context.bot.send_chat_action(chat_id, ChatAction.TYPING)
            req = DownloadRequest(url=url, platform=st.platform, mode=st.mode, quality=st.quality or QUALITY_BEST)
            last_err = None
            for backend in BACKENDS:
                for attempt in range(1, 4):
                    try:
                        res = await asyncio.to_thread(backend.download, req)
                        if req.mode == MODE_AUDIO:
                            await context.bot.send_audio(chat_id, res.file_path.open('rb'), caption="üéµ –ì–æ—Ç–æ–≤–æ!")
                            st.last_action = f"{st.platform}:audio:success"
                        else:
                            if res.file_path.suffix.lower() in {".mp4",".mov",".m4v",".webm",".mkv"}:
                                await context.bot.send_video(chat_id, res.file_path.open('rb'), supports_streaming=True, caption="üé¨ –ì–æ—Ç–æ–≤–æ!")
                            else:
                                await context.bot.send_document(chat_id, res.file_path.open('rb'), caption="üì¶ –ì–æ—Ç–æ–≤–æ!")
                            st.last_action = f"{st.platform}:video:{st.quality or 'best'}:success"
                        save_download({
                            "userId": user_id,
                            "platform": st.platform,
                            "mode": st.mode,
                            "quality": st.quality or "best",
                            "url": url,
                            "backend": backend.name,
                            "filename": res.filename,
                            "filesize": res.file_path.stat().st_size if res.file_path.exists() else None,
                        })
                        context.user_data["state"] = st
                        await context.bot.send_message(chat_id, "–û—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤? üìù", reply_markup=review_optin_kb())
                        return
                    except Exception as e:
                        last_err = e
                        continue
            st.last_action = f"{st.platform}:{st.mode}:error"
            context.user_data["state"] = st
            await context.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ.\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {last_err}")
            await context.bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? üìù", reply_markup=review_optin_kb())
        finally:
            active_tasks.pop(user_id, None)
